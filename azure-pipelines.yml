trigger:
- master

pool:
  vmImage: Ubuntu-16.04

variables:
  imageName: azure-pipelines-canary-k8s
  vmImageName: 'Ubuntu-16.04' 
  dockerRegistryServiceConnection: 'azure-container-registry'
  k8sNamespace: 'default'
  imagePullSecret: 'azure-pipelines-canary-k8s'
  imageRepository: 'azure-pipelines-canary-k8s'

  
stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)  
    steps:
    - task: Docker@2
      displayName: Build and push image
      inputs:
        containerRegistry: azure-pipelines-canary-k8s #replace with name of your Docker registry service connection
        repository: $(imageName)
        command: buildAndPush
        Dockerfile: app/Dockerfile
        tags: |
          $(Build.BuildId)
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'manifests'
        targetPath: 'manifests'     

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'faidev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              kubernetesServiceConnection: azure-pipelines-canary-k8s-svc
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
              imagePullSecrets: |
                $(imagePullSecret)
              
